#!/bin/bash

echo "=== Blabb.me Docker Admin Account Verification ==="
echo ""

# Determine which docker compose command to use
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo "‚ùå Neither 'docker-compose' nor 'docker compose' found. Please install Docker Compose."
    exit 1
fi

echo "Using: $DOCKER_COMPOSE"
echo ""

# Check if containers are running
echo "üìã Checking container status..."
$DOCKER_COMPOSE ps

echo ""
echo "üîç Checking PostgreSQL connection..."
POSTGRES_STATUS=$(docker-compose exec -T postgres pg_isready -U blabbme_user -d blabbme_db 2>/dev/null || echo "failed")

if [[ $POSTGRES_STATUS == *"accepting connections"* ]]; then
    echo "‚úÖ PostgreSQL is running and accepting connections"
else
    echo "‚ùå PostgreSQL is not ready. Container may be starting up."
    echo "Please wait a moment and try again."
    exit 1
fi

echo ""
echo "üîç Checking admin table and user..."

# Check if admins table exists
TABLE_EXISTS=$(docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -t -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'admins');" 2>/dev/null | tr -d '[:space:]')

if [[ $TABLE_EXISTS == "t" ]]; then
    echo "‚úÖ Admins table exists"
    
    # Check admin user
    echo ""
    echo "üìã Current admin users:"
    docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -c "SELECT id, username, created_at FROM admins;" 2>/dev/null
    
    # Check specific admin user
    ADMIN_EXISTS=$(docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -t -c "SELECT EXISTS (SELECT 1 FROM admins WHERE username = 'admin');" 2>/dev/null | tr -d '[:space:]')
    
    if [[ $ADMIN_EXISTS == "t" ]]; then
        echo ""
        echo "‚úÖ Default admin user exists"
        
        # Get the password to verify it's correct
        ADMIN_PASSWORD=$(docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -t -c "SELECT password FROM admins WHERE username = 'admin';" 2>/dev/null | tr -d '[:space:]')
        
        if [[ $ADMIN_PASSWORD == "admin123" ]]; then
            echo "‚úÖ Admin password is correctly set to 'admin123'"
        else
            echo "‚ùå Admin password is: '$ADMIN_PASSWORD' (should be 'admin123')"
            echo ""
            echo "üîß Fixing admin password..."
            docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -c "UPDATE admins SET password = 'admin123' WHERE username = 'admin';" >/dev/null 2>&1
            echo "‚úÖ Admin password updated to 'admin123'"
        fi
    else
        echo "‚ùå Default admin user does not exist"
        echo ""
        echo "üîß Creating admin user..."
        docker-compose exec -T postgres psql -U blabbme_user -d blabbme_db -c "INSERT INTO admins (username, password) VALUES ('admin', 'admin123') ON CONFLICT (username) DO UPDATE SET password = 'admin123';" >/dev/null 2>&1
        echo "‚úÖ Admin user created with username 'admin' and password 'admin123'"
    fi
else
    echo "‚ùå Admins table does not exist"
    echo "This suggests the database initialization didn't run properly."
    echo ""
    echo "üîß Rebuilding containers with fresh database..."
    docker-compose down -v
    docker-compose up -d --build
    echo "Please wait for containers to start and run this script again."
    exit 1
fi

echo ""
echo "üß™ Testing admin login via API..."

# Wait a moment for the app to be ready
sleep 2

# Test the login
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3000/api/auth/login \
    -H "Content-Type: application/json" \
    -d '{"username":"admin","password":"admin123"}' 2>/dev/null || echo "failed")

if [[ $LOGIN_RESPONSE == *"Login successful"* ]] || [[ $LOGIN_RESPONSE == *"admin"* ]]; then
    echo "‚úÖ Admin login test PASSED"
    echo "üéâ Admin account is working correctly!"
else
    echo "‚ùå Admin login test FAILED"
    echo "Response: $LOGIN_RESPONSE"
    echo ""
    echo "üí° This could mean:"
    echo "   - The app container is not running"
    echo "   - The app is not ready yet (try waiting and running again)"
    echo "   - There's a configuration issue"
fi

echo ""
echo "=== Summary ==="
echo "Admin credentials:"
echo "  Username: admin"
echo "  Password: admin123"
echo ""
echo "Admin login URL: http://localhost:3000/admin/login"
echo "API endpoint: http://localhost:3000/api/auth/login"